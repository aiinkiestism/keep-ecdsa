name: Go / Ethereum

on:
  # push:
  #   branches:
  #     - master
  # pull_request:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for workflow execution'
        required: false
        default: 'dev'
      upstream_builds:
        description: 'Upstream builds'
        required: false
      ref:
        description: 'Git reference to checkout (e.g. branch name)'
        required: false
        default: 'master'

jobs:
  notify-workflow-completed:
    if: github.event_name == 'workflow_dispatch' # not needed in current config
    runs-on: ubuntu-latest
    # needs: [] # we need to ensure action gets executed at the end of the worklow
    # Bear in mind that providing skipped job in `needs` will block the execution
    # of notify-workflow-completed. We could use "if: always()", but then the job
    # would be executed even if some earlier jobs failed.
    # See also: https://github.community/t/run-next-job-sequentially-even-if-a-previous-job-fails/17404/2
    # Or we can execute action not in separate job, but as a step of the last job.
    # May be problematic if we use matrix or have concurrent jobs in the workflow
    steps:
      - name: Notify release manager about completion of the workflow
        uses: keep-network/notify-workflow-completed@main
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        with:
          module: "github.com/keep-network/keep-ecdsa"
          url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          environment: ${{ github.event.inputs.environment }}
          upstream_builds: ${{ github.event.inputs.upstream_builds }}
          ref: ${{ github.event.inputs.ref }}
          version: ${{ github.sha }} # TODO: replace with version once versioning ready
  # build-test-publish:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.buildx-ethereum-cache
  #         key: ${{ runner.os }}-buildx-ethereum-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-ethereum-

  #     - name: Build Docker Build Image
  #       uses: docker/build-push-action@v2
  #       with:
  #         target: gobuild
  #         tags: go-build-env-ethereum
  #         load: true # load image to local registry to use it in next steps
  #         cache-from: type=local,src=/tmp/.buildx-ethereum-cache
  #         cache-to: type=local,dest=/tmp/.buildx-ethereum-cache
          
  #     - name: Run Go tests
  #       run: |
  #         docker run \
  #           --workdir /go/src/github.com/keep-network/keep-ecdsa \
  #           go-build-env-ethereum \
  #           gotestsum

  #     - name: Login to Google Container Registry
  #       if:  |
  #           github.ref == 'refs/heads/master'
  #             && (github.event_name == 'push'
  #             || github.event_name == 'workflow_dispatch')
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ${{ secrets.GCR_REGISTRY_URL }}
  #         username: _json_key
  #         password: ${{ secrets.KEEP_TEST_GCR_JSON_KEY }}

  #     - name: Build and publish Docker Runtime Image
  #       uses: docker/build-push-action@v2
  #       env:
  #         IMAGE_NAME: 'keep-ecdsa'
  #         GOOGLE_PROJECT_ID: ${{ secrets.KEEP_TEST_GOOGLE_PROJECT_ID }}
  #       with:
  #         # GCR image should be named according to following convention:
  #         # HOSTNAME/PROJECT-ID/IMAGE:TAG
  #         # We don't use TAG yet, will be added at later stages of work on RFC-18.
  #         tags: ${{ secrets.GCR_REGISTRY_URL }}/${{ env.GOOGLE_PROJECT_ID }}/${{ env.IMAGE_NAME }}
  #         labels: revision=${{ github.sha }}
  #         build-args: |
  #           REVISION=${{ github.sha }}
  #         # VERSION= ? TODO: Configure version, sample: 1.7.6
  #         push: |
  #           ${{ github.ref == 'refs/heads/master'
  #             && (github.event_name == 'push'
  #             || github.event_name == 'workflow_dispatch') }}
